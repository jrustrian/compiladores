package codigo;

import java_cup.runtime.Symbol;

parser code

{:
    private Symbol s;
    private static String output = "";

    public void syntax_error(Symbol s){
        this.s = s;
    }
    
    public Symbol getS() {
        return this.s;
    }

    public static void addOutput(String op){
        if (op.startsWith("\"")) {
            if (op.endsWith("\"")) {
                op = op.substring(1, op.length() - 1);
            }
        }
        
        Syntax.output += op;
    }

    public void cleanOutput(){
        this.output = "";
    }
    
    public String getOutput(){
        return this.output;
    }

:};


terminal IF, FOR, ELSE, WHILE, EQUALS, ADDITION, SUBTRACTION, MULTIPLICATION,
    DIVISION, OPENING_PARENTHESIS, CLOSING_PARENTHESIS, OPENING_BRACE, 
    CLOSING_BRACE, OPENING_BRACKET, CLOSING_BRACKET, GREATER_THAN, LESS_THAN, 
    MAIN, PRINT, SEMICOLON, INTEGER_DATATYPE, DECIMAL_DATATYPE, 
    STRING_DATATYPE, IDENTIFIER, INTEGER, DECIMAL, STRING, RETURN, ERROR;

non terminal START, STATEMENTS, STATEMENT, DECLARATION;

start with START;

START ::= 
    INTEGER_DATATYPE MAIN OPENING_PARENTHESIS CLOSING_PARENTHESIS OPENING_BRACE
    STATEMENTS 
    RETURN INTEGER SEMICOLON CLOSING_BRACE
;
START ::= 
    DECIMAL_DATATYPE MAIN OPENING_PARENTHESIS CLOSING_PARENTHESIS OPENING_BRACE 
    STATEMENTS 
    RETURN DECIMAL SEMICOLON CLOSING_BRACE;

START ::= 
    STRING_DATATYPE MAIN OPENING_PARENTHESIS CLOSING_PARENTHESIS OPENING_BRACE 
    STATEMENTS 
    RETURN STRING SEMICOLON CLOSING_BRACE
;
STATEMENTS ::= 
    STATEMENT STATEMENTS |
    STATEMENT
;

STATEMENT ::= 
    INTEGER_DATATYPE IDENTIFIER SEMICOLON | 
    INTEGER_DATATYPE IDENTIFIER EQUALS INTEGER SEMICOLON |
    DECIMAL_DATATYPE IDENTIFIER SEMICOLON |
    DECIMAL_DATATYPE IDENTIFIER EQUALS INTEGER SEMICOLON |
    STRING_DATATYPE IDENTIFIER SEMICOLON |
    STRING_DATATYPE IDENTIFIER EQUALS INTEGER SEMICOLON |
    IDENTIFIER EQUALS INTEGER SEMICOLON |
    IDENTIFIER EQUALS DECIMAL SEMICOLON |
    IDENTIFIER EQUALS STRING SEMICOLON |
    PRINT OPENING_PARENTHESIS STRING:str CLOSING_PARENTHESIS SEMICOLON 
    {: Syntax.addOutput(str.toString());:}
    |
    PRINT OPENING_PARENTHESIS DECIMAL CLOSING_PARENTHESIS SEMICOLON |
    PRINT OPENING_PARENTHESIS INTEGER:integer CLOSING_PARENTHESIS SEMICOLON    
    {: Syntax.addOutput(integer.toString());:}
;