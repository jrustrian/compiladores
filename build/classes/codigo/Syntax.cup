package codigo;

import java_cup.runtime.Symbol;
import java.util.HashMap;
import java.util.Map;
parser code

{:
    
    // Variable para contar el numero de variables enteras
    private static Map<String, Integer> integerVariables = new HashMap<String, Integer>();
    
    private Symbol s;
    private static String output = "";
    

    public void syntax_error(Symbol s){
        this.s = s;
    }
    
    public Symbol getS() {
        return this.s;
    }

    public static void addOutput(String op){
        if (op.startsWith("\"")) {
            if (op.endsWith("\"")) {
                op = op.substring(1, op.length() - 1);
            }
        }
        
        Syntax.output += op;
        Syntax.output += "\n";
    }

    public void cleanOutput(){
        this.output = "";
    }
    
    public String getOutput(){
        return this.output;
    }

    public static void newIntegerVariable(String str, int _integer){
        integerVariables.put(str,_integer);
    }
    
    public static int getIntegerVariable(String str){
        int res = 0;
        
        res = integerVariables.get(str);
        return res;
    }

:};


terminal IF, FOR, ELSE, WHILE, EQUALS, ADDITION, SUBTRACTION, MULTIPLICATION,
    DIVISION, OPENING_PARENTHESIS, CLOSING_PARENTHESIS, OPENING_BRACE, 
    CLOSING_BRACE, OPENING_BRACKET, CLOSING_BRACKET, GREATER_THAN, LESS_THAN, 
    MAIN, PRINT, SEMICOLON, INTEGER_DATATYPE, DECIMAL_DATATYPE, 
    STRING_DATATYPE, IDENTIFIER, INTEGER, DECIMAL, STRING, RETURN, ERROR;

non terminal START, STATEMENTS, STATEMENT, DECLARATION;

start with START;

START ::= 
    INTEGER_DATATYPE MAIN OPENING_PARENTHESIS CLOSING_PARENTHESIS OPENING_BRACE
    STATEMENTS 
    RETURN INTEGER SEMICOLON CLOSING_BRACE
;
START ::= 
    DECIMAL_DATATYPE MAIN OPENING_PARENTHESIS CLOSING_PARENTHESIS OPENING_BRACE 
    STATEMENTS 
    RETURN DECIMAL SEMICOLON CLOSING_BRACE;

START ::= 
    STRING_DATATYPE MAIN OPENING_PARENTHESIS CLOSING_PARENTHESIS OPENING_BRACE 
    STATEMENTS 
    RETURN STRING SEMICOLON CLOSING_BRACE
;
STATEMENTS ::= 
    STATEMENT STATEMENTS |

;

STATEMENT ::= 
    INTEGER_DATATYPE IDENTIFIER SEMICOLON | 
    INTEGER_DATATYPE IDENTIFIER:str EQUALS INTEGER:_integer SEMICOLON 
    {: 
        int _integerConst = 0;
        _integerConst = Integer.parseInt(_integer.toString());
        Syntax.newIntegerVariable(str.toString(), _integerConst);
        
    :}
    |
    DECIMAL_DATATYPE IDENTIFIER SEMICOLON |
    DECIMAL_DATATYPE IDENTIFIER EQUALS INTEGER SEMICOLON |
    STRING_DATATYPE IDENTIFIER SEMICOLON |
    STRING_DATATYPE IDENTIFIER EQUALS INTEGER SEMICOLON |
    IDENTIFIER EQUALS INTEGER SEMICOLON |
    IDENTIFIER EQUALS DECIMAL SEMICOLON |
    IDENTIFIER EQUALS STRING SEMICOLON |
    PRINT OPENING_PARENTHESIS IDENTIFIER:str CLOSING_PARENTHESIS SEMICOLON 
    {:
        int _integer = Syntax.getIntegerVariable(str.toString());
        Syntax.addOutput(_integer.toString());
    :}
    |
    PRINT OPENING_PARENTHESIS STRING:str CLOSING_PARENTHESIS SEMICOLON 
    {: Syntax.addOutput(str.toString());:}
    |
    PRINT OPENING_PARENTHESIS DECIMAL CLOSING_PARENTHESIS SEMICOLON 
    |
    PRINT OPENING_PARENTHESIS INTEGER:integer CLOSING_PARENTHESIS SEMICOLON    
    {: Syntax.addOutput(integer.toString());:}
    |
    WHILE OPENING_PARENTHESIS INTEGER:_integer GREATER_THAN IDENTIFIER:str CLOSING_PARENTHESIS
    OPENING_BRACE STATEMENT:stmnts CLOSING_BRACE
    {:
    
        int _var = 0;
        int _integerConst = 0;
        _integerConst = Integer.parseInt(_integer.toString());
        _var = Syntax.getIntegerVariable(str.toString());
        while(_var > _integerConst) {
            Syntax.addOutput("hola");
            _integerConst++;
        }

    :}
;